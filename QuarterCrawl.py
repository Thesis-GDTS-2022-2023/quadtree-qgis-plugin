# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuarterCrawl
                                 A QGIS plugin
 Dataset Generator
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by GDTS
        email                : quang.tau@gdts.vn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .QuarterCrawl_dialog import QuarterCrawlDialog
from .quarter import *
import os.path


class QuarterCrawl:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QuarterCrawl_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QuarterCrawl')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.gui_number = 0  # open one GUI
        self.check_pass = None  # check ones

        self.grid_path = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QuarterCrawl', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/QuarterCrawl/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'quartercrawl'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.check_pass = False
        # initialization
        self.infer_worker = None


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QuarterCrawl'),
                action)
            self.iface.removeToolBarIcon(action)


    def generate_grids(self):
        input = self.dlg.mQgsFileWidget.filePath()
        spin_value = self.dlg.mQgsSpinBox.value()


        # Prompt the user to enter the filename
        filename, _ = QFileDialog.getSaveFileName(self.iface.mainWindow(), "Save File", "", "Text files (*.geojson)")

        # Construct the full file path
        self.grid_path = os.path.abspath(filename) 

        # Do something with the values
        print("Input file:", input)
        print("Grid file:", self.grid_path)
        print("Spin value:", spin_value)

        process = Quarter(spin_value)
        begin = time.time()
        size = process.setup(input)

        Quarter.boxes.exportJSON(self.grid_path)
        end = time.time()

        # Show the result in a QMessageBox
        msg_box = QMessageBox()
        msg_box.setWindowTitle("Time Result")
        msg_box.setText(f"The process took {end - begin} seconds.")
        msg_box.exec_()

    def crawl_images(self):
        spin_value = self.dlg.mQgsSpinBox_2.value()
        print("hello")
        # Open a folder dialog to specify the destination folder
        folder_dialog = QFileDialog()
        folder_dialog.setFileMode(QFileDialog.Directory)
        folder_dialog.setWindowTitle("Select Folder")

        if folder_dialog.exec_():

            folder_path = folder_dialog.selectedFiles()[0]

            urlWithParams = 'type=xyz&url=http://mt1.google.com/vt/lyrs%3Ds%26x%3D%7Bx%7D%26y%3D%7By%7D%26z%3D%7Bz%7D&zmax=22&zmin=0'    
            rlayer = QgsRasterLayer(urlWithParams, 'Google Satellite', 'wms') 

            renderer = rlayer.renderer()    
            provider = rlayer.dataProvider() 

            pipe = QgsRasterPipe()  
            pipe.set(provider.clone())    
            pipe.set(renderer.clone()) 

            crs = QgsCoordinateReferenceSystem("EPSG:3857")

            begin = time.time()

            layer = QgsVectorLayer(self.grid_path, 'Layer 1', 'ogr')
            for feature in layer.getFeatures():
                extent = QgsRectangle(feature.attributes()[1],feature.attributes()[2],feature.attributes()[3],feature.attributes()[4])
                file_name = os.path.join(folder_path, layer.name() + '_' + str(feature.attributes()[0]) + '.tif')
                file_writer = QgsRasterFileWriter(file_name)
                file_writer.Mode(0)
                file_writer.writeRaster(pipe, spin_value, spin_value, extent, crs)

            end = time.time()
             # Show the result in a QMessageBox
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Time Result")
            msg_box.setText(f"The process took {end - begin} seconds.")
            msg_box.exec_()

    def init_setting(self):
        # Set the maximum value for the spin box
        self.dlg.mQgsSpinBox.setMaximum(100000)

        self.dlg.mQgsSpinBox_2.setMaximum(100000)
        
        # Connect a button click event to a method
        self.dlg.pushButton.clicked.connect(self.generate_grids)

        self.dlg.pushButton_2.clicked.connect(self.crawl_images)

    def run(self):
        """Run method that performs all the real work"""
        self.gui_number += 1
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QuarterCrawlDialog()
            self.init_setting()
        if self.gui_number == 1:  # avoid multiple startup plugin errors
            # Run the dialog event loop
            result = self.dlg.show()
            # See if OK was pressed
            if result:
                # Do something useful here - delete the line containing pass and
                # substitute with your code.
                pass
            
            self.gui_number -= 1

